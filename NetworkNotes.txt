Links:

https://en.wikipedia.org/wiki/Internet_protocol_suite
https://docs.python.org/3/library/socket.html?highlight=icmp

http://pydoc.net/Python/gping/0.1/gping/

A) Decorators are good for timing functions:
	https://realpython.com/blog/python/primer-on-python-decorators/
	decorator_timing_function_example.py
	
Tutorial:  https://www.tutorialspoint.com/python/python_networking.htm

Python provides two levels of access to network services 
	low level access the basic socket support in the underlying operating system
		 allows you to implement clients and servers for both connection-oriented and connectionless protocols

	higher-level access to specific application-level network protocols, such as FTP, HTTP

Sockets
Sockets are the endpoints of a bidirectional communications channel. Sockets may communicate within a process, between processes on the same machine, or between processes on different continents.

Sockets may be implemented over a number of different channel types: Unix domain sockets, TCP, UDP, and so on. The socket library provides specific classes for handling the common transports as well as a generic interface for handling the rest.

Sockets have their own vocabulary −

Sr.No.	Term & Description
1	
Domain

The family of protocols that is used as the transport mechanism. These values are constants such as AF_INET, PF_INET, PF_UNIX, PF_X25, and so on.

2	type
	The type of communications between the two endpoints
	- SOCK_STREAM for connection-oriented protocols 
	- SOCK_DGRAM for connectionless protocols.

3	protocol
	Typically zero, this may be used to identify a variant of a protocol within a domain and type.

4	hostname
	identifier of a network interface −
		string, which can be a host name, a dotted-quad address, or an IPV6 address in colon (and possibly dot) notation
		string "<broadcast>", which specifies an INADDR_BROADCAST address.
		zero-length string, which specifies INADDR_ANY, or Integer, interpreted as a binary address in host byte order.

5	 port
	Each server listens for clients calling on one or more ports. 
	A port may be a Fixnum port number, a string containing a port number, or the name of a service.


The socket Module
	To create a socket, you must use the socket.socket() function available in socket module, which has the general syntax 
	
	s = socket.socket (socket_family, socket_type, protocol=0)

	Description of the parameters −
		a. socket_family − This is either AF_UNIX or AF_INET, as explained earlier.
		b. socket_type − This is either SOCK_STREAM or SOCK_DGRAM.
		c. protocol − This is usually left out, defaulting to 0.

	Once you have socket object
		use required functions to create your client or server program
		
	 	Following is the list of functions required −

Server Socket Methods
	Sr.No.				Method & Description
	1	s.bind()		This method binds address (hostname, port number pair) to socket.
	2	s.listen()		This method sets up and start TCP listener.
	3	s.accept()		This passively accept TCP client connection, waiting until connection arrives (blocking).

Client Socket Methods
	Sr.No.				Method & Description
	1	s.connect()		This method actively initiates TCP server connection.
	
	General Socket Methods
	Sr.No.						Method & Description
	1	s.recv()				This method receives TCP message
	2	s.send()				This method transmits TCP message
	3	s.recvfrom()			This method receives UDP message
	4	s.sendto()				This method transmits UDP message
	5	s.close()				This method closes socket
	6	socket.gethostname()	Returns the hostname.

	
Example Run:  
	
	Server:
	C1246895-osx:src rduvalwa2$ ls
	Asyncio			PyNet			PyProgramming_Chap5	echo_client.py		echo_server.py		simpleClient.py		simpleServer.py
	C1246895-osx:src rduvalwa2$ python simpleServer.py
	('Got connection from', ('192.168.1.10', 53860))
	('Got connection from', ('192.168.1.10', 53861))
	
	Client:
	C1246895-osx:src rduvalwa2$ ls
	Asyncio			PyNet			PyProgramming_Chap5	echo_client.py		echo_server.py		simpleClient.py		simpleServer.py
	C1246895-osx:src rduvalwa2$ python simpleClient.py 
	Thank you for connecting
	C1246895-osx:src rduvalwa2$ python simpleClient.py 
	Thank you for connecting
	
	
Python Internet modules
	A list of some important modules in Python Network/Internet programming.
	____________________________________________________________________________________________
	Protocol	Common function		Port No			Python module
	____________________________________________________________________________________________
	HTTP		Web pages			80				httplib, urllib, xmlrpclib
	NNTP		Usenet news			119				nntplib
	FTP			File transfers		20				ftplib, urllib
	SMTP		Sending email		25				smtplib
	POP3		Fetching email		110				poplib
	IMAP4		Fetching email		143				imaplib
	Telnet		Command lines		23				telnetlib
	Gopher		Document transfers	70				gopherlib, urllib
	
Please check all the libraries mentioned above to work with FTP, SMTP, POP, and IMAP protocols.
	
	